/*
 * This file is generated by jOOQ.
 */
package org.cinema.jooq.tables.records;


import org.cinema.jooq.tables.Tickets;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketsRecord extends UpdatableRecordImpl<TicketsRecord> implements Record4<Long, byte[], byte[], byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>cinema.tickets.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>cinema.tickets.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>cinema.tickets.uuid</code>.
     */
    public void setUuid(byte[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>cinema.tickets.uuid</code>.
     */
    public byte[] getUuid() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>cinema.tickets.purchase_uuid</code>.
     */
    public void setPurchaseUuid(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>cinema.tickets.purchase_uuid</code>.
     */
    public byte[] getPurchaseUuid() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>cinema.tickets.file_uuid</code>.
     */
    public void setFileUuid(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>cinema.tickets.file_uuid</code>.
     */
    public byte[] getFileUuid() {
        return (byte[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, byte[], byte[], byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, byte[], byte[], byte[]> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Tickets.TICKETS.ID;
    }

    @Override
    public Field<byte[]> field2() {
        return Tickets.TICKETS.UUID;
    }

    @Override
    public Field<byte[]> field3() {
        return Tickets.TICKETS.PURCHASE_UUID;
    }

    @Override
    public Field<byte[]> field4() {
        return Tickets.TICKETS.FILE_UUID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public byte[] component2() {
        return getUuid();
    }

    @Override
    public byte[] component3() {
        return getPurchaseUuid();
    }

    @Override
    public byte[] component4() {
        return getFileUuid();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public byte[] value2() {
        return getUuid();
    }

    @Override
    public byte[] value3() {
        return getPurchaseUuid();
    }

    @Override
    public byte[] value4() {
        return getFileUuid();
    }

    @Override
    public TicketsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TicketsRecord value2(byte[] value) {
        setUuid(value);
        return this;
    }

    @Override
    public TicketsRecord value3(byte[] value) {
        setPurchaseUuid(value);
        return this;
    }

    @Override
    public TicketsRecord value4(byte[] value) {
        setFileUuid(value);
        return this;
    }

    @Override
    public TicketsRecord values(Long value1, byte[] value2, byte[] value3, byte[] value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TicketsRecord
     */
    public TicketsRecord() {
        super(Tickets.TICKETS);
    }

    /**
     * Create a detached, initialised TicketsRecord
     */
    public TicketsRecord(Long id, byte[] uuid, byte[] purchaseUuid, byte[] fileUuid) {
        super(Tickets.TICKETS);

        setId(id);
        setUuid(uuid);
        setPurchaseUuid(purchaseUuid);
        setFileUuid(fileUuid);
    }
}
