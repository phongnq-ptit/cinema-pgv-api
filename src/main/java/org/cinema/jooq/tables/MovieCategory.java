/*
 * This file is generated by jOOQ.
 */
package org.cinema.jooq.tables;


import org.cinema.jooq.Cinema;
import org.cinema.jooq.Keys;
import org.cinema.jooq.tables.records.MovieCategoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MovieCategory extends TableImpl<MovieCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cinema.movie_category</code>
     */
    public static final MovieCategory MOVIE_CATEGORY = new MovieCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieCategoryRecord> getRecordType() {
        return MovieCategoryRecord.class;
    }

    /**
     * The column <code>cinema.movie_category.id</code>.
     */
    public final TableField<MovieCategoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinema.movie_category.uuid</code>.
     */
    public final TableField<MovieCategoryRecord, byte[]> UUID = createField(DSL.name("uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>cinema.movie_category.movie_uuid</code>.
     */
    public final TableField<MovieCategoryRecord, byte[]> MOVIE_UUID = createField(DSL.name("movie_uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>cinema.movie_category.category_uuid</code>.
     */
    public final TableField<MovieCategoryRecord, byte[]> CATEGORY_UUID = createField(DSL.name("category_uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    private MovieCategory(Name alias, Table<MovieCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private MovieCategory(Name alias, Table<MovieCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cinema.movie_category</code> table reference
     */
    public MovieCategory(String alias) {
        this(DSL.name(alias), MOVIE_CATEGORY);
    }

    /**
     * Create an aliased <code>cinema.movie_category</code> table reference
     */
    public MovieCategory(Name alias) {
        this(alias, MOVIE_CATEGORY);
    }

    /**
     * Create a <code>cinema.movie_category</code> table reference
     */
    public MovieCategory() {
        this(DSL.name("movie_category"), null);
    }

    public <O extends Record> MovieCategory(Table<O> child, ForeignKey<O, MovieCategoryRecord> key) {
        super(child, key, MOVIE_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cinema.CINEMA;
    }

    @Override
    public Identity<MovieCategoryRecord, Long> getIdentity() {
        return (Identity<MovieCategoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MovieCategoryRecord> getPrimaryKey() {
        return Keys.KEY_MOVIE_CATEGORY_PRIMARY;
    }

    @Override
    public MovieCategory as(String alias) {
        return new MovieCategory(DSL.name(alias), this);
    }

    @Override
    public MovieCategory as(Name alias) {
        return new MovieCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieCategory rename(String name) {
        return new MovieCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieCategory rename(Name name) {
        return new MovieCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, byte[], byte[], byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
