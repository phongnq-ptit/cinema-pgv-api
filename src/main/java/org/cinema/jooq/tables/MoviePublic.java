/*
 * This file is generated by jOOQ.
 */
package org.cinema.jooq.tables;


import java.time.LocalDateTime;

import org.cinema.jooq.Cinema;
import org.cinema.jooq.Keys;
import org.cinema.jooq.tables.records.MoviePublicRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MoviePublic extends TableImpl<MoviePublicRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cinema.movie_public</code>
     */
    public static final MoviePublic MOVIE_PUBLIC = new MoviePublic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MoviePublicRecord> getRecordType() {
        return MoviePublicRecord.class;
    }

    /**
     * The column <code>cinema.movie_public.id</code>.
     */
    public final TableField<MoviePublicRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinema.movie_public.uuid</code>.
     */
    public final TableField<MoviePublicRecord, byte[]> UUID = createField(DSL.name("uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>cinema.movie_public.movie_uuid</code>.
     */
    public final TableField<MoviePublicRecord, byte[]> MOVIE_UUID = createField(DSL.name("movie_uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>cinema.movie_public.branch_uuid</code>.
     */
    public final TableField<MoviePublicRecord, byte[]> BRANCH_UUID = createField(DSL.name("branch_uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>cinema.movie_public.start_date</code>.
     */
    public final TableField<MoviePublicRecord, LocalDateTime> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>cinema.movie_public.end_date</code>.
     */
    public final TableField<MoviePublicRecord, LocalDateTime> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>cinema.movie_public.total_tickets</code>.
     */
    public final TableField<MoviePublicRecord, Integer> TOTAL_TICKETS = createField(DSL.name("total_tickets"), SQLDataType.INTEGER.nullable(false), this, "");

    private MoviePublic(Name alias, Table<MoviePublicRecord> aliased) {
        this(alias, aliased, null);
    }

    private MoviePublic(Name alias, Table<MoviePublicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cinema.movie_public</code> table reference
     */
    public MoviePublic(String alias) {
        this(DSL.name(alias), MOVIE_PUBLIC);
    }

    /**
     * Create an aliased <code>cinema.movie_public</code> table reference
     */
    public MoviePublic(Name alias) {
        this(alias, MOVIE_PUBLIC);
    }

    /**
     * Create a <code>cinema.movie_public</code> table reference
     */
    public MoviePublic() {
        this(DSL.name("movie_public"), null);
    }

    public <O extends Record> MoviePublic(Table<O> child, ForeignKey<O, MoviePublicRecord> key) {
        super(child, key, MOVIE_PUBLIC);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cinema.CINEMA;
    }

    @Override
    public Identity<MoviePublicRecord, Long> getIdentity() {
        return (Identity<MoviePublicRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MoviePublicRecord> getPrimaryKey() {
        return Keys.KEY_MOVIE_PUBLIC_PRIMARY;
    }

    @Override
    public MoviePublic as(String alias) {
        return new MoviePublic(DSL.name(alias), this);
    }

    @Override
    public MoviePublic as(Name alias) {
        return new MoviePublic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MoviePublic rename(String name) {
        return new MoviePublic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MoviePublic rename(Name name) {
        return new MoviePublic(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, byte[], byte[], byte[], LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
