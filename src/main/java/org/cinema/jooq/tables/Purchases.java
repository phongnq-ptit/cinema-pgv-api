/*
 * This file is generated by jOOQ.
 */
package org.cinema.jooq.tables;


import java.time.LocalDateTime;

import org.cinema.jooq.Cinema;
import org.cinema.jooq.Keys;
import org.cinema.jooq.tables.records.PurchasesRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Purchases extends TableImpl<PurchasesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cinema.purchases</code>
     */
    public static final Purchases PURCHASES = new Purchases();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchasesRecord> getRecordType() {
        return PurchasesRecord.class;
    }

    /**
     * The column <code>cinema.purchases.id</code>.
     */
    public final TableField<PurchasesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinema.purchases.uuid</code>.
     */
    public final TableField<PurchasesRecord, byte[]> UUID = createField(DSL.name("uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>cinema.purchases.user_uuid</code>.
     */
    public final TableField<PurchasesRecord, byte[]> USER_UUID = createField(DSL.name("user_uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>cinema.purchases.movie_public_uuid</code>.
     */
    public final TableField<PurchasesRecord, byte[]> MOVIE_PUBLIC_UUID = createField(DSL.name("movie_public_uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>cinema.purchases.quantity_of_tickets</code>.
     */
    public final TableField<PurchasesRecord, Integer> QUANTITY_OF_TICKETS = createField(DSL.name("quantity_of_tickets"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cinema.purchases.created_at</code>.
     */
    public final TableField<PurchasesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>cinema.purchases.updated_at</code>.
     */
    public final TableField<PurchasesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>cinema.purchases.downloads</code>.
     */
    public final TableField<PurchasesRecord, Integer> DOWNLOADS = createField(DSL.name("downloads"), SQLDataType.INTEGER.nullable(false), this, "");

    private Purchases(Name alias, Table<PurchasesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Purchases(Name alias, Table<PurchasesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cinema.purchases</code> table reference
     */
    public Purchases(String alias) {
        this(DSL.name(alias), PURCHASES);
    }

    /**
     * Create an aliased <code>cinema.purchases</code> table reference
     */
    public Purchases(Name alias) {
        this(alias, PURCHASES);
    }

    /**
     * Create a <code>cinema.purchases</code> table reference
     */
    public Purchases() {
        this(DSL.name("purchases"), null);
    }

    public <O extends Record> Purchases(Table<O> child, ForeignKey<O, PurchasesRecord> key) {
        super(child, key, PURCHASES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cinema.CINEMA;
    }

    @Override
    public Identity<PurchasesRecord, Long> getIdentity() {
        return (Identity<PurchasesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PurchasesRecord> getPrimaryKey() {
        return Keys.KEY_PURCHASES_PRIMARY;
    }

    @Override
    public Purchases as(String alias) {
        return new Purchases(DSL.name(alias), this);
    }

    @Override
    public Purchases as(Name alias) {
        return new Purchases(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchases rename(String name) {
        return new Purchases(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchases rename(Name name) {
        return new Purchases(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, byte[], byte[], byte[], Integer, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
