/*
 * This file is generated by jOOQ.
 */
package org.cinema.jooq.tables;


import org.cinema.jooq.Cinema;
import org.cinema.jooq.Keys;
import org.cinema.jooq.tables.records.TicketsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tickets extends TableImpl<TicketsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cinema.tickets</code>
     */
    public static final Tickets TICKETS = new Tickets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketsRecord> getRecordType() {
        return TicketsRecord.class;
    }

    /**
     * The column <code>cinema.tickets.id</code>.
     */
    public final TableField<TicketsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinema.tickets.uuid</code>.
     */
    public final TableField<TicketsRecord, byte[]> UUID = createField(DSL.name("uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>cinema.tickets.purchase_uuid</code>.
     */
    public final TableField<TicketsRecord, byte[]> PURCHASE_UUID = createField(DSL.name("purchase_uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    /**
     * The column <code>cinema.tickets.file_uuid</code>.
     */
    public final TableField<TicketsRecord, byte[]> FILE_UUID = createField(DSL.name("file_uuid"), SQLDataType.BINARY(16).nullable(false), this, "");

    private Tickets(Name alias, Table<TicketsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tickets(Name alias, Table<TicketsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cinema.tickets</code> table reference
     */
    public Tickets(String alias) {
        this(DSL.name(alias), TICKETS);
    }

    /**
     * Create an aliased <code>cinema.tickets</code> table reference
     */
    public Tickets(Name alias) {
        this(alias, TICKETS);
    }

    /**
     * Create a <code>cinema.tickets</code> table reference
     */
    public Tickets() {
        this(DSL.name("tickets"), null);
    }

    public <O extends Record> Tickets(Table<O> child, ForeignKey<O, TicketsRecord> key) {
        super(child, key, TICKETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cinema.CINEMA;
    }

    @Override
    public Identity<TicketsRecord, Long> getIdentity() {
        return (Identity<TicketsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TicketsRecord> getPrimaryKey() {
        return Keys.KEY_TICKETS_PRIMARY;
    }

    @Override
    public Tickets as(String alias) {
        return new Tickets(DSL.name(alias), this);
    }

    @Override
    public Tickets as(Name alias) {
        return new Tickets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(String name) {
        return new Tickets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(Name name) {
        return new Tickets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, byte[], byte[], byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
